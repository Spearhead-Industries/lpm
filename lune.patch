
--- /dev/null
+++ b/src/lune/builtins/lpm/mod.rs
@@ -0,0 +1,32 @@
+use mlua::prelude::*;
+use once_cell::sync::Lazy;
+use std::{env, path::PathBuf};
+use tokio::fs;
+
+const MAGIC: &[u8; 8] = b"cr3sc3nt";
+
+static CURRENT_EXE: Lazy<PathBuf> =
+    Lazy::new(|| env::current_exe().expect("failed to get current exe"));
+
+use crate::lune::util::TableBuilder;
+
+pub fn create(lua: &'static Lua) -> LuaResult<LuaTable> {
+    TableBuilder::new(lua)?
+        .with_async_function("create_binary", create_binary)?
+        .build_readonly()
+}
+
+async fn create_binary(_: &Lua, bytecode: LuaString<'_>) -> LuaResult<String> {
+    let mut patched_bin = fs::read(CURRENT_EXE.to_path_buf()).await?;
+
+    let bytecode_bytes = Vec::from(bytecode.as_bytes());
+
+    let mut bytes = Vec::new();
+    bytes.extend_from_slice(&bytecode_bytes);
+    bytes.extend_from_slice(&(bytecode_bytes.len() as u64).to_be_bytes());
+    bytes.extend_from_slice(MAGIC);
+
+    patched_bin.extend_from_slice(&bytes);
+
+    Ok(unsafe { String::from_utf8_unchecked(patched_bin) })
+}


--- a/src/lune/builtins/mod.rs
+++ b/src/lune/builtins/mod.rs
@@ -4,6 +4,7 @@ use mlua::prelude::*;
 
 mod datetime;
 mod fs;
+mod lpm;
 mod luau;
 mod net;
 mod process;
@@ -24,6 +25,7 @@ pub enum LuneBuiltin {
     Process,
     Serde,
     Stdio,
+    LPM,
     #[cfg(feature = "roblox")]
     Roblox,
 }
@@ -42,6 +44,7 @@ where
             Self::Process => "process",
             Self::Serde => "serde",
             Self::Stdio => "stdio",
+            Self::LPM => "lpm",
             #[cfg(feature = "roblox")]
             Self::Roblox => "roblox",
         }
@@ -57,6 +60,7 @@ where
             Self::Process => process::create(lua),
             Self::Serde => serde::create(lua),
             Self::Stdio => stdio::create(lua),
+            Self::LPM => lpm::create(lua),
             #[cfg(feature = "roblox")]
             Self::Roblox => roblox::create(lua),
         };
@@ -82,6 +86,7 @@ impl FromStr for LuneBuiltin {
             "process" => Ok(Self::Process),
             "serde" => Ok(Self::Serde),
             "stdio" => Ok(Self::Stdio),
+            "lpm" => Ok(Self::LPM),
             #[cfg(feature = "roblox")]
             "roblox" => Ok(Self::Roblox),
             _ => Err(format!("Unknown builtin library '{s}'")),

--- a/src/lune/builtins/process/mod.rs
+++ b/src/lune/builtins/process/mod.rs
@@ -45,8 +45,8 @@ pub fn create(lua: &'static Lua) -> LuaResult<LuaTable> {
         .clone();
     let args_tab = TableBuilder::new(lua)?
         .with_sequential_values(args_vec)?
-        .build_readonly()?;
-    // Create proxied table for env that gets & sets real env vars
+        .build()?; // Must be mutable, frozen in lua.
+                   // Create proxied table for env that gets & sets real env vars
     let env_tab = TableBuilder::new(lua)?
         .with_metatable(
             TableBuilder::new(lua)?
