local stdio = require("@lune/stdio");
local serde = require("@lune/serde");
local process = require("@lune/process");
local fs = require("@lune/fs");

local util = require("../util");

local function nil_if_empty(text: string): string?
    if text == "" then
        return nil; 
    else
        return text;
    end
end

local function dedent(text: string): string
    --local padding = text:match("^(%w+)%W");
    return text;
end

return function(argc: number, argv: {string}): number
    if fs.isFile("./lpm-package.toml") then
        if stdio.prompt("confirm", "There is already an lpm-package.toml file, would you like to replace it?") then
            fs.removeFile("./lpm-package.toml")
        else
            return 0;
        end

    end

    local dir = process.cwd:gsub("\\", "/"):split("/");

    local package_file = {};

    package_file.name = stdio.prompt("text", "Package Name",  dir[#dir-1]);
    
    local function try_version()
        local semver = stdio.prompt("text", "Version", "1.0.0");
        
        if util.parse_semver(semver).valid then
            package_file.version = semver;
        else
            stdio.ewrite("Invalid Semver.\n");
            try_version();
        end
    end
    try_version();
    
    package_file.description = stdio.prompt("text", "Description");
    package_file.entrypoint = stdio.prompt("text", "Entrypoint", "./src/init.lua");
    package_file.repository = stdio.prompt("text", "Git Repository");
    package_file.authors = stdio.prompt("text", "Author(s) (Seperated by ;)"):split(";");
    package_file.licence = stdio.prompt("text", "Licence", "MIT");
    package_file.dependencies = {};
    package_file.exclude = {"docs"};
    package_file.scripts = {};

    local file = serde.encode("toml", package_file);

    stdio.write("\nPackage File:\n\n");
    print(file);

    if not stdio.prompt("confirm", "Is this correct") then
        return 0;
    end
   
    file = "# Autogenerated by Spearhead-Industries/lpm\n\n" .. file;

    fs.writeFile("./lpm-package.toml", file);
    process.spawn("lune", {"setup"});


    --// Setup .gitignore

    if not fs.isFile("./.gitignore") then
        fs.writeFile("./.gitignore", "");
    end

    local git_ignore = fs.readFile("./.gitignore");
    if string.find(git_ignore, "# LPM") == nil then
        fs.writeFile("./.gitignore", git_ignore.."# LPM\n\n/out\n/lpm_modules\n\n");
    end
    
    
    --// Setup .luaurc
    
    if not fs.isFile("./.luaurc") then
        fs.writeFile("./.luaurc", "{}");
    end

    local luaurc = serde.decode("json", fs.readFile("./.luaurc"));
    luaurc.aliases = luaurc.aliases or {};
    luaurc.aliases["lpm"] = "./lpm_modules/"
    fs.writeFile("./.luaurc", serde.encode("json", luaurc, true))

    -- vscode settings --
    local vscode_settings = serde.decode("json", fs.readFile("./.vscode/settings.json"));
    vscode_settings["luau-lsp.require.directoryAliases"]["@lpm/"] = "./lpm_modules/";
    fs.writeFile("./.vscode/settings.json", serde.encode("json", vscode_settings, true))

    return 0;
end